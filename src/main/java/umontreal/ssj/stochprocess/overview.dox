/**
 * @package umontreal.ssj.stochprocess
 *
 * Stochastic Processes.
 *
 * This package provides classes to define stochastic processes @f$\{X(t),
 * t\ge0\}@f$ in the real space, and to simulate their sample paths at a finite number of
 * observation times @f$t_0 \le t_1 \le\cdots\le t_d@f$, i.e., *skeletons* of their
 * sample paths. 
 * The generated path skeleton is a  vector @f$(X(t_0),X(t_1),…,X(t_d)) \in \mathbb{R}@f$.
 *
 * The observation times @f$t_0, …, t_d@f$ can be specified (and can be changed)
 * after defining the process, via the method `setObservationTimes`.
 * In some cases, the observation times can also be specified one by one 
 * when generating the value at the next observation time. 
 * This may be convenient or even necessary
 * if the observation times are random, for example.
 * The random stream used to generate the sample path can also be set or changed, using
 * `setStream`, and it can also be passed each time to the method that generates the paths.
 * 
 * The available processes include the Brownian motion (or Gaussian process), 
 * Gamma Process, Inverse Gaussian, versions with a random clock (or subordinate process)
 * such as the variance-gamma and normal inverse Gaussian processes,  
 * exponential (or geometric) versions of all of these, and more.  
 * Many of those processes can be simulated in different ways, such as standard sequential
 * generation of the increments (which are independent in the caes of L\'evy processes),
 * or using a bridge sampling strategy as in `BrownianMotionBridge`, or by using a 
 * principal component decomposition as in `BrownianMotionPCA`.
 * The choice of simulation strategy can have a significant impact on the variance 
 * when combined with randomized quasi-Monte Carlo (RQMC).
 * 
 * There are also multivariate versions in which the state is a \f$c\f$-dimensional vector,
 * @f$\mathbb{X}(t) \in \mathbb{R}@f$.   At each time step, a new state vector is generated.
 * 
 * @remark: In the future, it might be useful to have a common interface implemented 
 * by `StochasticProcess` and @ref umontreal.ssj.markovchainrqmc.MarkovChainDouble.
 * 
 */